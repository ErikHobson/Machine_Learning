{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "e2dadf4c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "174.95899089167017"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### SOFT SENSOR D50C ########\n",
    "\n",
    "\n",
    "feed_0=110.0  #input:feed\n",
    "P_0= 75.8  #input: cyclone pressure\n",
    "\n",
    "sg=2.7\n",
    "circ_L=4.000 #400% circulating load\n",
    "feed_p=0.60  #60 %S Cyclone feed\n",
    "rho=1.61\n",
    "\n",
    "DC =0.381 #m     Cyclone diameter\n",
    "ID =0.152 #m     Inner diameter\n",
    "DO=0.17145 #m    Vortex finder diameter\n",
    "DU=0.1016 #m     Spigot diameter\n",
    "LC   =0.641 #m   cyclone length\n",
    "theta =15 #deg   cone angle\n",
    "KD0   =6.00e-5  #D50 constant\n",
    "KQ0   =490       #capacity const\n",
    "KV1   =6.6       #volume split constant\n",
    "KW1   =8.4       #water split conts\n",
    "alpha =3.9       #eff curve sharpness\n",
    "beta  =0.0       #init dip in eff\n",
    "\n",
    "\n",
    "def cyc_vol(feed):\n",
    "    a=feed*(1+circ_L)/feed_p\n",
    "    b=feed*(1+circ_L)\n",
    "    c=feed*(1+circ_L)/sg\n",
    "    cvol=a-b+c\n",
    "    return cvol\n",
    "\n",
    "def rho(feed):\n",
    "    cvol=cyc_vol(feed)\n",
    "    a=feed*(1+circ_L)/feed_p\n",
    "    b=feed*(1+circ_L)\n",
    "    c=feed*(1+circ_L)/sg\n",
    "    d= a/ (a - b +c)\n",
    "    return d\n",
    "\n",
    "def lumda(feed):\n",
    "    c=feed*(1+circ_L)/sg\n",
    "    l= 10**((1.82*c)/(cyc_vol(feed))) / (8.05*(1-c/cyc_vol(feed))**2)\n",
    "    return l\n",
    "\n",
    "def D50C(feed,P):\n",
    "    f1= DC*KD0* (DC**(-0.65)) *((DO/DC)**0.52) *((DU/DC)**(-0.47)) *((DI/DC)**(-0.5)) \\\n",
    "    *((LC/DC)**0.2) *(theta**0.15) *((P/(rho(feed)*9.8*DC))**(-0.22)) *(lumda(feed)**0.93)\n",
    "    return f1*1000\n",
    "\n",
    "\n",
    "def unit_cap(feed,P):\n",
    "    return KQ0*DC**(-0.1)*(DO/DC)**0.68 *(DI/DC)**0.45 *(LC/DC)**0.2 *theta**-0.1 *DC**2 *(P/rho(feed))**0.5 \n",
    "\n",
    "def numcyc(feed,P):\n",
    "    return cyc_vol/unit_cap(feed,P)\n",
    "\n",
    "\n",
    "#WHAT is the time constant? Do feed changes affect D50 immediately?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "59c2402e",
   "metadata": {},
   "outputs": [
    {
     "ename": "ZeroDivisionError",
     "evalue": "0.0 cannot be raised to a negative power",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[23], line 38\u001b[0m\n\u001b[1;32m     36\u001b[0m RHO \u001b[38;5;241m=\u001b[39m ((CL\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m+\u001b[39mCFPS\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m100\u001b[39m))\u001b[38;5;241m+\u001b[39m(CL\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m+\u001b[39mCFPS\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m100\u001b[39m))\u001b[38;5;241m/\u001b[39mFFPS\u001b[38;5;241m-\u001b[39m(CL\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m+\u001b[39mCFPS\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m100\u001b[39m)))\u001b[38;5;241m/\u001b[39m((CL\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m+\u001b[39mCFPS\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m100\u001b[39m))\u001b[38;5;241m/\u001b[39mFFPS\u001b[38;5;241m-\u001b[39m(CL\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m+\u001b[39mCFPS\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m100\u001b[39m))\u001b[38;5;241m+\u001b[39m(CL\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m+\u001b[39mCFPS\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m100\u001b[39m))\u001b[38;5;241m/\u001b[39mB)\n\u001b[1;32m     37\u001b[0m LUMDA \u001b[38;5;241m=\u001b[39m math\u001b[38;5;241m.\u001b[39mpow(\u001b[38;5;241m10\u001b[39m, \u001b[38;5;241m1.82\u001b[39m\u001b[38;5;241m*\u001b[39m(CL\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m+\u001b[39mCFPS\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m100\u001b[39m))\u001b[38;5;241m/\u001b[39mB\u001b[38;5;241m/\u001b[39m((CL\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m+\u001b[39mCFPS\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m100\u001b[39m))\u001b[38;5;241m/\u001b[39mFFPS\u001b[38;5;241m-\u001b[39m(CL\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m+\u001b[39mCFPS\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m100\u001b[39m))\u001b[38;5;241m+\u001b[39m(CL\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m+\u001b[39mCFPS\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m100\u001b[39m))\u001b[38;5;241m/\u001b[39mB))\u001b[38;5;241m/\u001b[39m(\u001b[38;5;241m8.05\u001b[39m\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m-\u001b[39m(CL\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m+\u001b[39mCFPS\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m100\u001b[39m))\u001b[38;5;241m/\u001b[39mB\u001b[38;5;241m/\u001b[39m((CL\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m+\u001b[39mCFPS\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m100\u001b[39m))\u001b[38;5;241m/\u001b[39mFFPS\u001b[38;5;241m-\u001b[39m(CL\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m+\u001b[39mCFPS\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m100\u001b[39m))\u001b[38;5;241m+\u001b[39m(CL\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m+\u001b[39mCFPS\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m100\u001b[39m))\u001b[38;5;241m/\u001b[39mB))\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m2\u001b[39m)\n\u001b[0;32m---> 38\u001b[0m CU \u001b[38;5;241m=\u001b[39m T\u001b[38;5;241m*\u001b[39mM\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m0.1\u001b[39m)\u001b[38;5;241m*\u001b[39m(O\u001b[38;5;241m/\u001b[39mM)\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m0.68\u001b[39m\u001b[38;5;241m*\u001b[39m(N\u001b[38;5;241m/\u001b[39mM)\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m0.45\u001b[39m\u001b[38;5;241m*\u001b[39m(Q\u001b[38;5;241m/\u001b[39mM)\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m0.2\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[43mR\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m-\u001b[39;49m\u001b[38;5;241;43m0.1\u001b[39;49m\u001b[43m)\u001b[49m\u001b[38;5;241m*\u001b[39m(M)\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m2\u001b[39m\u001b[38;5;241m*\u001b[39mmath\u001b[38;5;241m.\u001b[39msqrt(G\u001b[38;5;241m/\u001b[39mH)\n\u001b[1;32m     39\u001b[0m NC \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mround\u001b[39m(T\u001b[38;5;241m/\u001b[39mJ, \u001b[38;5;241m0\u001b[39m)\n\u001b[1;32m     40\u001b[0m D50C \u001b[38;5;241m=\u001b[39m M\u001b[38;5;241m*\u001b[39mS\u001b[38;5;241m*\u001b[39m(M\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m0.65\u001b[39m))\u001b[38;5;241m*\u001b[39m((O\u001b[38;5;241m/\u001b[39mM)\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m0.52\u001b[39m)\u001b[38;5;241m*\u001b[39m((P\u001b[38;5;241m/\u001b[39mM)\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m0.47\u001b[39m))\u001b[38;5;241m*\u001b[39m((N\u001b[38;5;241m/\u001b[39mM)\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m0.5\u001b[39m))\u001b[38;5;241m*\u001b[39m((Q\u001b[38;5;241m/\u001b[39mM)\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m0.2\u001b[39m)\u001b[38;5;241m*\u001b[39m(R\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m0.15\u001b[39m)\u001b[38;5;241m*\u001b[39m((G\u001b[38;5;241m/\u001b[39m(H\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m9.8\u001b[39m\u001b[38;5;241m*\u001b[39mM))\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m0.22\u001b[39m))\u001b[38;5;241m*\u001b[39m(I\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m0.93\u001b[39m)\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m1000\u001b[39m\n",
      "\u001b[0;31mZeroDivisionError\u001b[0m: 0.0 cannot be raised to a negative power"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "# Constants\n",
    "SG = 2.7\n",
    "FFR = 110\n",
    "CL = 400\n",
    "DC = 0.381\n",
    "DI = 0.152\n",
    "DO = 0.17145\n",
    "DU = 0.1016\n",
    "LC = 0.641\n",
    "CA = 15\n",
    "KD0 = 6e-05\n",
    "KQ0 = 439.17*M+322.27\n",
    "KV1 = 6.6\n",
    "KW1 = 8.4\n",
    "ALPHA = 3.9\n",
    "BETA = 0.0\n",
    "CFS = 60\n",
    "# Functions\n",
    "CFPS = CFS/100\n",
    "FFPS = 100-CFPS\n",
    "B = 570\n",
    "T = 175\n",
    "M = 3\n",
    "N = 490\n",
    "O = 6.6\n",
    "P = 8.4\n",
    "Q = 3.9\n",
    "R = 0.0\n",
    "G = math.pi*(DC**2)/4*(LC+DI*math.tan(math.radians(CA)))\n",
    "H = math.pi*(DO**2)/4\n",
    "I = math.pi*(DU**2)/4\n",
    "P = 11*6.89475729\n",
    "TCV = (CL*(1+CFPS/100))/FFPS-(CL*(1+CFPS/100))+(CL*(1+CFPS/100))/B\n",
    "RHO = ((CL*(1+CFPS/100))+(CL*(1+CFPS/100))/FFPS-(CL*(1+CFPS/100)))/((CL*(1+CFPS/100))/FFPS-(CL*(1+CFPS/100))+(CL*(1+CFPS/100))/B)\n",
    "LUMDA = math.pow(10, 1.82*(CL*(1+CFPS/100))/B/((CL*(1+CFPS/100))/FFPS-(CL*(1+CFPS/100))+(CL*(1+CFPS/100))/B))/(8.05*(1-(CL*(1+CFPS/100))/B/((CL*(1+CFPS/100))/FFPS-(CL*(1+CFPS/100))+(CL*(1+CFPS/100))/B))**2)\n",
    "CU = T*M**(-0.1)*(O/M)**0.68*(N/M)**0.45*(Q/M)**0.2*R**(-0.1)*(M)**2*math.sqrt(G/H)\n",
    "NC = round(T/J, 0)\n",
    "D50C = M*S*(M**(-0.65))*((O/M)**0.52)*((P/M)**(-0.47))*((N/M)**(-0.5))*((Q/M)**0.2)*(R**0.15)*((G/(H*9.8*M))**(-0.22))*(I**0.93)*1000\n",
    "\n",
    "\n",
    "\n",
    "# Unit conversions\n",
    "DC = round((DC*25.4)/1000, 3)\n",
    "DI = round((DI*25.4)/1000, 3)\n",
    "DO = round((DO*25.4)/1000, 3)\n",
    "DU = round((DU*25.4)/1000, 3)\n",
    "LC = round((LC*25.4), 3)\n",
    "KD0 = round(KD0, 8)\n",
    "\n",
    "# Print results\n",
    "print(\"SG:\", SG)\n",
    "print(\"Fresh feed rate:\", FFR)\n",
    "print(\"Circulating Load:\", CL)\n",
    "print(\"Total Cyclone volume (Calc):\", TCV)\n",
    "print(\"Cyclone feed %S:\", CFS)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "4b114984",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "def calc_total_cyclone_volume(Qc, S, F, P):\n",
    "    return (Qc * (1 + S) / F) - (Qc * (1 + S)) + (Qc * (1 + S) / B(F, P))\n",
    "\n",
    "def B(F, P):\n",
    "    return (P * 11 * 6.89475729) / (F * 1000)\n",
    "\n",
    "def calc_lumda(Qc, S, F, P):\n",
    "    return (Qc * (1 + S) + Qc * (1 + S) / F - Qc * (1 + S)) / (Qc * (1 + S) / F - Qc * (1 + S) + Qc * (1 + S) / B(F, P))\n",
    "\n",
    "def calc_KD0(C, S, F, B):\n",
    "    return 10 ** (1.82 * C * (1 + S) / B / (C * (1 + S) / F - C * (1 + S) + C * (1 + S) / B)) / (8.05 * (1 - C * (1 + S) / B / (C * (1 + S) / F - C * (1 + S) + C * (1 + S) / B)) ** 2)\n",
    "\n",
    "def calc_KQ0(M, N, O, P, Q, R):\n",
    "    return M * S(M) * (M ** (-0.65)) * ((O / M) ** 0.52) * ((P / M) ** (-0.47)) * ((N / M) ** (-0.5)) * ((Q / M) ** 0.2) * (R ** 0.15) * ((G / (H * 9.8 * M)) ** (-0.22)) * (I ** 0.93) * 1000\n",
    "\n",
    "def S(M):\n",
    "    return M ** (-0.1)\n",
    "\n",
    "def calc_cyclone_diameter(KD0, C):\n",
    "    return round(KD0 * C ** 0.5, 0)\n",
    "\n",
    "def convert_inch_to_meter(inch):\n",
    "    return inch * 0.0254\n",
    "\n",
    "def calc_dc_diameter(Di, Do):\n",
    "    return convert_inch_to_meter(Di)\n",
    "\n",
    "def calc_inlet_diameter(Dc):\n",
    "    return convert_inch_to_meter(Dc)\n",
    "\n",
    "def calc_vortex_finder_diameter(Dc):\n",
    "    return convert_inch_to_meter(Dc * 1.25)\n",
    "\n",
    "def calc_spigot_diameter(Dc):\n",
    "    return convert_inch_to_meter(Dc * 0.16)\n",
    "\n",
    "def calc_cylinder_length(Dc, Theta):\n",
    "    return convert_inch_to_meter(25.25)\n",
    "\n",
    "def calc_cyclone_capacity(KQ0):\n",
    "    return round(KQ0 * 439.17 + 322.27, 0)\n",
    "\n",
    "def calc_alpha(C):\n",
    "    return 15\n",
    "\n",
    "def calc_beta(F):\n",
    "    return 6e-05\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "4c43e500",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'Qc' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[26], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m calc_total_cyclone_volume(\u001b[43mQc\u001b[49m, S, F, P)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'Qc' is not defined"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "6edee618",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'FFSP' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[24], line 6\u001b[0m\n\u001b[1;32m      4\u001b[0m CL \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m400\u001b[39m\n\u001b[1;32m      5\u001b[0m CFSP \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0.6\u001b[39m\n\u001b[0;32m----> 6\u001b[0m B \u001b[38;5;241m=\u001b[39m ((CL\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m+\u001b[39mCFSP))\u001b[38;5;241m/\u001b[39m\u001b[43mFFSP\u001b[49m\u001b[38;5;241m-\u001b[39m(CL\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m+\u001b[39mCFSP))\u001b[38;5;241m+\u001b[39m(CL\u001b[38;5;241m*\u001b[39m(\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m+\u001b[39mCFSP))\u001b[38;5;241m/\u001b[39mFFDP)\n\u001b[1;32m      7\u001b[0m P \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m75.8\u001b[39m\n\u001b[1;32m      8\u001b[0m RHO \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1.61\u001b[39m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'FFSP' is not defined"
     ]
    }
   ],
   "source": [
    "# Define the constants\n",
    "SG = 2.7\n",
    "FFR = 110\n",
    "CL = 400\n",
    "CFSP = 0.6\n",
    "B = ((CL*(1+CFSP))/FFSP-(CL*(1+CFSP))+(CL*(1+CFSP))/FFDP)\n",
    "P = 75.8\n",
    "RHO = 1.61\n",
    "LAMBDA = 1.34\n",
    "CUC = 175\n",
    "NOC = 3\n",
    "D50C = 0.104\n",
    "DC = 0.381\n",
    "DI = 0.152\n",
    "DO = 0.17145\n",
    "DU = 0.1016\n",
    "LC = 0.641\n",
    "THETA = 15\n",
    "KD0 = 6.00E-05\n",
    "KQ0 = 490\n",
    "KV1 = 6.6\n",
    "KW1 = 8.4\n",
    "ALPHA = 3.9\n",
    "BETA = 0.0\n",
    "\n",
    "# Define the functions\n",
    "def total_cyclone_volume():\n",
    "    return (CL*(1+CFSP)/FFSP)-(CL*(1+CFSP))+(CL*(1+CFSP))/B\n",
    "\n",
    "def pressure():\n",
    "    return 11*6.89475729\n",
    "\n",
    "def volume_split_constant():\n",
    "    return 10**(1.82*(CL*(1+CFSP))/B/((CL*(1+CFSP))/FFSP-(CL*(1+CFSP))+(CL*(1+CFSP))/B))/(8.05*(1-(CL*(1+CFSP))/B/((CL*(1+CFSP))/FFSP-(CL*(1+CFSP))+(CL*(1+CFSP))/B))**2)\n",
    "\n",
    "def capacity_constant():\n",
    "    return T*M**(-0.1)*(O/M)**0.68*(N/M)**0.45*(Q/M)**0.2*R**(-0.1)*(M)**2*(G/H)**0.5\n",
    "\n",
    "def cyclone_diameter():\n",
    "    return round(T/DC, 0)\n",
    "\n",
    "def cyclone_unit_capacity():\n",
    "    return M*S*(M**(-0.65))*((O/M)**0.52)*((P/M)**(-0.47))*((N/M)**(-0.5))*((Q/M)**0.2)*(R**0.15)*((G/(H*9.8*M))**(-0.22))*(I**0.93)*1000\n",
    "\n",
    "def inlet_diameter():\n",
    "    return CONVERT(DI,\"in\",\"m\")\n",
    "\n",
    "def vortex_finder_diameter():\n",
    "    return CONVERT(DO,\"in\",\"m\")\n",
    "\n",
    "def spigot_diameter():\n",
    "    return CONVERT(DU,\"in\",\"m\")\n",
    "\n",
    "def cylinder_length():\n",
    "    return CONVERT(LC,\"in\",\"m\")\n",
    "\n",
    "def d50_constant():\n",
    "    return 439.17*M+322.27\n",
    "\n",
    "def water_split_constant():\n",
    "    return KV1*M*KD0**ALPHA*(1-BETA*(KW1-1))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e627a4d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
